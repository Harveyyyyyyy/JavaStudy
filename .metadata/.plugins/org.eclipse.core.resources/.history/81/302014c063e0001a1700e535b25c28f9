


//15min 讲解 PPt 类比报告  
//开学讲 录视频



import java.awt.*;
import java.awt.event.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Collection;
import java.util.Iterator;

import javax.swing.*;
import javax.swing.event.*;
public class LoveJFrame extends JFrame implements ActionListener,CaretListener,
WindowListener,Runnable{
	private JButton[] buttons;
	private JButton readButton,writeButton;
	private Color color;
	private JTextField[] text;
	private JTextField sleeptime;
	private LoveCanvas lovecanvas;
	private MessageJDialog jdialog;
	private Collection<Pixel> coll;
	private Pixel pixel;
	private Socket socket;
	private ObjectOutputStream objout;
	private int n=1;
	public JPanel cmdpanel,sleeppanel;
	String[] textstr= {"大小","位置x:","y:","缩放比例","旋转角度"};
	String[] buttonstr= {"选择颜色","启动","中断"};
	String[] numstr= {"7","0","0","10","4.7"};
	public LoveJFrame(String name) throws IOException {
		super(name);
		Dimension dim =this.getToolkit().getScreenSize();
		this.setBounds(dim.width/4, dim.height/4, dim.width/2, dim.height/2);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		this.cmdpanel=new JPanel();
		this.sleeppanel=new JPanel();
		this.getContentPane().add(cmdpanel,"North");
		this.getContentPane().add(sleeppanel,"South");
		sleeppanel.add(new JLabel("sleeptime"));
		sleeppanel.add(sleeptime=new JTextField("500",10));
		sleeppanel.add(this.writeButton=new JButton("保存"));
		sleeppanel.add(this.readButton=new JButton("打开"));
		this.writeButton.addActionListener(this);
		this.readButton.addActionListener(this);
		this.buttons=new JButton[buttonstr.length];
		for(int i=0;i<buttonstr.length;i++) {
			cmdpanel.add(this.buttons[i]=new JButton(buttonstr[i]));
			this.buttons[i].addActionListener(this);
		}
		this.text=new JTextField[textstr.length];
		for(int i=0;i<textstr.length;i++) {
			cmdpanel.add(new JLabel(textstr[i]));
			cmdpanel.add(this.text[i]=new JTextField(numstr[i],3));
			this.text[i].addCaretListener(this);
		}
		cmdpanel.add(new JLabel("PI"));
		lovecanvas=new LoveCanvas();
		this.color=Color.red;
		this.getContentPane().add(this.lovecanvas,"Center");
		this.setVisible(true);
		this.jdialog=new MessageJDialog();
		this.addWindowListener(this);
		this.objout=null;
	}
	
	public LoveJFrame(String name,String host,int port) throws IOException{
		this(name);
		Socket socket=new Socket(host,port);
		this.setTitle(this.getTitle()+":"+socket.getLocalPort());
		this.setSocket(socket);
	}
	
	public void setSocket(Socket socket) throws IOException{
		this.socket=socket;
		this.objout=new ObjectOutputStream(this.socket.getOutputStream());
     	new Thread(this).start();
	}
	
	
	public void actionPerformed(ActionEvent ev) {
		if(ev.getSource()==this.buttons[0]) {
		Color color=JColorChooser.showDialog(this, "选择颜色", this.color);
		if(color!=null) {
			this.color=color;
		}
		}
	    if(ev.getSource()==this.buttons[1]) {
			if(lovecanvas.thread.getState()!=Thread.State.NEW)
				lovecanvas.thread=new Thread(this);
			lovecanvas.thread.start();
			this.buttons[1].setEnabled(false);
			this.buttons[2].setEnabled(true);
		}
	    if(ev.getSource()==this.buttons[2]) {
	    	lovecanvas.thread.interrupt();
			this.buttons[1].setEnabled(true);
			this.buttons[2].setEnabled(false);
		}
	    if(ev.getSource()==this.writeButton)
 	    	CollectionFile.writeTo(getTitle(),this.coll);
	    if(ev.getSource()==this.readButton)
	    	CollectionFile.readFrom(getName(), this.coll);
			
	}
	public void caretUpdate(CaretEvent ev) {
		for(int i=0;i<textstr.length;i++) {
			if(text[i].getText().isEmpty()||text[i].getText()=="") {
				this.jdialog.show("该空不能为空");
			}else if(Double.parseDouble(text[i].getText())<0){
				this.jdialog.show("该空不能为负数");
			}else
				try {
					double x=Double.parseDouble(text[i].getText());
				}catch(NumberFormatException ex) {
					this.jdialog.show("\""+text[i].getText()+"\"不能转换成浮点数.");
				}
		}
			
	}
	private class MessageJDialog extends JDialog{
		private JLabel jlabel;
		private MessageJDialog() {
			super(LoveJFrame.this,"提示",true);
			this.setSize(420, 110);
			this.jlabel=new JLabel("",JLabel.CENTER);
			this.getContentPane().add(this.jlabel);
			this.setDefaultCloseOperation(HIDE_ON_CLOSE);
		}
		private void show(String message) {
			this.jlabel.setText(message);
			this.setLocation(LoveJFrame.this.getX()+100, LoveJFrame.this.getY()+100);
			this.setVisible(true);
		}
	}
	private class LoveCanvas extends Canvas  {
		Thread thread=new Thread(this);
		public void paint(Graphics g) {
			g.setColor(Color.black);
			int x0=this.getWidth()/2;
			int y0=this.getHeight()/2;
			g.drawLine(0, y0, x0*2, y0);
			g.drawLine(x0,0,x0,y0*2);
			g.setColor(LoveJFrame.this.color);
			
				for(int i=0;i<n;i++) {
					double angle=i*Math.PI/512;
					double a=Double.parseDouble(text[0].getText())*Double.parseDouble(text[3].getText());
					double radius=a*(1-Math.cos(angle));
					int x=(int)Math.round(radius*Math.cos(angle+Double.parseDouble(text[4].getText())));
					int y=(int)Math.round(radius*Math.sin(angle+Double.parseDouble(text[4].getText())));
					g.fillOval(x0+x+Integer.parseInt(text[1].getText()), y0+y+Integer.parseInt(text[2].getText()), 1, 1);
				    LoveJFrame.this.pixel=new Pixel(new Point(x0+x+Integer.parseInt(text[1].getText()), y0+y+Integer.parseInt(text[2].getText())),g.getColor());
			}
			}
		public void update(Graphics g) {
			this.paint(g);
		}
		public void run() {
			while(true) {
				if(n>1000) {
					n=1;
		    	}else {
					n=n+100;
					lovecanvas.repaint();
				}
				try {
					Thread.sleep(Integer.parseInt(sleeptime.getText()));	
				}catch(InterruptedException e) {
					break;
				}
			}
		}
		}
	
	
	public void windowOpened(WindowEvent e) {}
	public void windowClosing(WindowEvent e) {}
	public void windowClosed(WindowEvent e) {}
	public void windowIconified(WindowEvent e) {
		this.coll.add(this.pixel);
	}
	public void windowDeiconified(WindowEvent e) {}
	public void windowActivated(WindowEvent e) {
		
	}
	public void windowDeactivated(WindowEvent e) {}
	
	
//	public void run() {
//		try {
//			ObjectInputStream objin=new ObjectInputStream(this.socket.getInputStream());
//			while(true) {
//				try {
//					if(n>1000) {
//						n=1;
//			    	}else {
//						n=n+100;
//					}
//						Thread.sleep(Integer.parseInt(sleeptime.getText()));
//						this.pixel=(Pixel)objin.readObject();
//						this.lovecanvas.repaint();
//					}catch(EOFException |InterruptedException ex) {
//						break;
//					}
//			}
//			objin.close();
//			LoveJFrame.this.objout.close();
//			LoveJFrame.this.socket.close();
//		}catch(IOException|ClassNotFoundException ex) {
//			
//		}
//	}
//	
	
	
	public static void main(String args[]) throws IOException {
		new LoveJFrame("心形线","127.0.0.1", 10011);
	}
	
	
	
	
	
	}
